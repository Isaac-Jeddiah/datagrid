import React, { createContext, useState, useEffect, useContext } from 'react';
import axios from 'axios';

const ApiContext = createContext();

export const useApi = () => useContext(ApiContext);

export const ApiProvider = ({ children }) => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [invoiceStatus, setInvoiceStatus] = useState('Pending'); 

  const fetchProducts = async () => {
    try {
      setLoading(true);
      const response = await axios.get('http://localhost:5000/ResultObject');
      setProducts(response.data);
      setLoading(false);
    } catch (err) {
      setError('Error fetching products: ' + err.message);
      setLoading(false);
    }
  };

  const updateProductField = (productId, fieldName, value) => {
    setProducts(prevProducts => 
      prevProducts.map(product => {
        if (product.ThirdPartyInvoiceDetailId === productId) {
          return { ...product, [fieldName]: value };
        }
        return product;
      })
    );
  };
  const updateUnitOfMeasureField = (productId, uomIndex, fieldName, value) => {
    setProducts(prevProducts => 
      prevProducts.map(product => {
        if (product.ThirdPartyInvoiceDetailId === productId) {
          const updatedUoms = [...product.ThirdPartyInvoiceDetailProductUnitOfMeasures];
          updatedUoms[uomIndex] = { 
            ...updatedUoms[uomIndex], 
            [fieldName]: value 
          };
          
          return {
            ...product,
            ThirdPartyInvoiceDetailProductUnitOfMeasures: updatedUoms
          };
        }
        return product;
      })
    );
  };

  const updateInvoiceStatus = (status) => {
    setInvoiceStatus(status);
  };

  useEffect(() => {
    fetchProducts();
    console.log('fetching products', invoiceStatus);
  }, []);

  const value = {
    products,
    loading,
    error,
    invoiceStatus,
    updateProductField,
    updateUnitOfMeasureField,
    updateInvoiceStatus,
    refreshData: fetchProducts
  };

  return (
    <ApiContext.Provider value={value}>
      {children}
    </ApiContext.Provider>
  );
};